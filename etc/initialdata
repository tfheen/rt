# Initial data for a fresh RT installation.

@Users = (
    {  Name         => 'root',
       Gecos        => 'root',
       RealName     => 'Enoch Root',
       Password     => 'password',
       EmailAddress => "root\@localhost",
       Comments     => 'SuperUser',
       Privileged   => '1',
    },
);

@Groups = (
);

@Queues = ({ Name              => 'General',
             Description       => 'The default queue',
             CorrespondAddress => "",
             CommentAddress    => "", },
           { Name        => '___Approvals',
             Lifecycle   => 'approvals',
             Description => 'A system-internal queue for the approvals system',
             Disabled    => 2, } );

@ScripActions = (

    {  Name        => 'Autoreply To Requestors',    # loc
       Description =>
'Always sends a message to the requestors independent of message sender' ,                                            # loc
       ExecModule => 'Autoreply',
       Argument   => 'Requestor' },
    { Name        => 'Notify Requestors',                    # loc
      Description => 'Sends a message to the requestors',    # loc
      ExecModule  => 'Notify',
      Argument    => 'Requestor' },
    { Name        => 'Notify Owner as Comment',              # loc
      Description => 'Sends mail to the owner',              # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'Owner' },
    { Name        => 'Notify Owner',                         # loc
      Description => 'Sends mail to the owner',              # loc
      ExecModule  => 'Notify',
      Argument    => 'Owner' },
    { Name        => 'Notify Ccs as Comment',              # loc
      Description => 'Sends mail to the Ccs as a comment', # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'Cc' },
    { Name        => 'Notify Ccs',                                   # loc
      Description => 'Sends mail to the Ccs',                        # loc
      ExecModule  => 'Notify',
      Argument    => 'Cc' },
    { Name        => 'Notify AdminCcs as Comment',                        # loc
      Description => 'Sends mail to the administrative Ccs as a comment', # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'AdminCc' },
    { Name        => 'Notify AdminCcs',                                   # loc
      Description => 'Sends mail to the administrative Ccs',              # loc
      ExecModule  => 'Notify',
      Argument    => 'AdminCc' },

    { Name        => 'Notify Requestors and Ccs as Comment',              # loc
      Description => 'Send mail to requestors and Ccs as a comment',      # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'Requestor,Cc' },

    { Name        => 'Notify Requestors and Ccs',                         # loc
      Description => 'Send mail to requestors and Ccs',                   # loc
      ExecModule  => 'Notify',
      Argument    => 'Requestor,Cc' },

    { Name        => 'Notify Owner, Requestors, Ccs and AdminCcs as Comment',    # loc
      Description => 'Send mail to owner and all watchers as a "comment"',          # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'All' },
    { Name        => 'Notify Owner, Requestors, Ccs and AdminCcs',               # loc
      Description => 'Send mail to owner and all watchers',                         # loc
      ExecModule  => 'Notify',
      Argument    => 'All' },
    { Name        => 'Notify Other Recipients as Comment',                # loc
      Description => 'Sends mail to explicitly listed Ccs and Bccs',      # loc
      ExecModule  => 'NotifyAsComment',
      Argument    => 'OtherRecipients' },
    { Name        => 'Notify Other Recipients',                           # loc
      Description => 'Sends mail to explicitly listed Ccs and Bccs',      # loc
      ExecModule  => 'Notify',
      Argument    => 'OtherRecipients' },
    { Name        => 'User Defined',                                      # loc
      Description => 'Perform a user-defined action',                     # loc
      ExecModule  => 'UserDefined', },
    {  Name        => 'Create Tickets',                                    # loc
       Description =>
         'Create new tickets based on this scrip\'s template',             # loc
       ExecModule => 'CreateTickets', },
    { Name        => 'Open Tickets',                                      # loc
      Description => 'Open tickets on correspondence',                    # loc
      ExecModule  => 'AutoOpen' },
    { Name        => 'Open Inactive Tickets',                             # loc
      Description => 'Open inactive tickets',                             # loc
      ExecModule  => 'AutoOpenInactive' },
    { Name        => 'Extract Subject Tag',                               # loc
      Description => 'Extract tags from a Transaction\'s subject and add them to the Ticket\'s subject.', # loc
      ExecModule  => 'ExtractSubjectTag' },
);

@ScripConditions = (
    { Name                 => 'On Create',                                # loc
      Description          => 'When a ticket is created',                 # loc
      ApplicableTransTypes => 'Create',
      ExecModule           => 'AnyTransaction', },

    { Name                 => 'On Transaction',                           # loc
      Description          => 'When anything happens',                    # loc
      ApplicableTransTypes => 'Any',
      ExecModule           => 'AnyTransaction', },
    {

      Name                 => 'On Correspond',                             # loc
      Description          => 'Whenever correspondence comes in',          # loc
      ApplicableTransTypes => 'Correspond',
      ExecModule           => 'AnyTransaction', },

    {

      Name                 => 'On Forward',                                # loc
      Description          => 'Whenever a ticket or transaction is forwarded', # loc
      ApplicableTransTypes => 'Forward Transaction,Forward Ticket',
      ExecModule           => 'AnyTransaction', },

    {

      Name                 => 'On Forward Ticket',                         # loc
      Description          => 'Whenever a ticket is forwarded',            # loc
      ApplicableTransTypes => 'Forward Ticket',
      ExecModule           => 'AnyTransaction', },

    {

      Name                 => 'On Forward Transaction',                    # loc
      Description          => 'Whenever a transaction is forwarded',       # loc
      ApplicableTransTypes => 'Forward Transaction',
      ExecModule           => 'AnyTransaction', },

    {

      Name                 => 'On Comment',                                # loc
      Description          => 'Whenever comments come in',                 # loc
      ApplicableTransTypes => 'Comment',
      ExecModule           => 'AnyTransaction' },
    {

      Name                 => 'On Status Change',                          # loc
      Description          => 'Whenever a ticket\'s status changes',       # loc
      ApplicableTransTypes => 'Status',
      ExecModule           => 'AnyTransaction',

    },
    {

      Name                 => 'On Priority Change',                       # loc
      Description          => 'Whenever a ticket\'s priority changes',    # loc
      ApplicableTransTypes => 'Set',
      ExecModule           => 'PriorityChange',
    },
    {

      Name                 => 'On Owner Change',                           # loc
      Description          => 'Whenever a ticket\'s owner changes',        # loc
      ApplicableTransTypes => 'Any',
      ExecModule           => 'OwnerChange',

    },
    {

      Name                 => 'On Queue Change',                           # loc
      Description          => 'Whenever a ticket\'s queue changes',        # loc
      ApplicableTransTypes => 'Set',
      ExecModule           => 'QueueChange',

    },
    {  Name                 => 'On Resolve',                               # loc
       Description          => 'Whenever a ticket is resolved',            # loc
       ApplicableTransTypes => 'Status',
       ExecModule           => 'StatusChange',
       Argument             => 'resolved'

    },
    {  Name                 => 'On Reject',                                # loc
       Description          => 'Whenever a ticket is rejected',            # loc
       ApplicableTransTypes => 'Status',
       ExecModule           => 'StatusChange',
       Argument             => 'rejected'

    },
    {  Name                 => 'User Defined',                             # loc
       Description          => 'Whenever a user-defined condition occurs', # loc
       ApplicableTransTypes => 'Any',
       ExecModule           => 'UserDefined'

    },

    {  Name                 => 'On Close',                                 # loc
       Description          => 'Whenever a ticket is closed', # loc
       ApplicableTransTypes => 'Status,Set',
       ExecModule           => 'CloseTicket',
    },
    {  Name                 => 'On Reopen',                                # loc
       Description          => 'Whenever a ticket is reopened', # loc
       ApplicableTransTypes => 'Status,Set',
       ExecModule           => 'ReopenTicket',
    },

);

@Templates = (
    { Queue       => '0',
      Name        => 'Blank',                                             # loc
      Description => 'A blank template',                                  # loc
      Content     => '', },
    {  Queue       => '0',
       Name        => 'Autoreply',                                         # loc
       Description => 'Default Autoresponse template',                     # loc
       Content     => 'Subject: AutoReply: {$Ticket->Subject}


Greetings,

This message has been automatically generated in response to the
creation of a trouble ticket regarding:
        "{$Ticket->Subject()}", 
a summary of which appears below.

There is no need to reply to this message right now.  Your ticket has been
assigned an ID of { $Ticket->SubjectTag }.

Please include the string:

         { $Ticket->SubjectTag }

in the subject line of all future correspondence about this issue. To do so, 
you may reply to this message.

                        Thank you,
                        {$Ticket->QueueObj->CorrespondAddress()}

-------------------------------------------------------------------------
{$Transaction->Content()}
'
    },

    {  Queue       => '0',
       Name        => 'Transaction',                     # loc
       Description => 'Default transaction template',    # loc
       Content     => 'RT-Attach-Message: yes


{$Transaction->CreatedAsString}: Request {$Ticket->id} was acted upon.
 Transaction: {$Transaction->Description}
       Queue: {$Ticket->QueueObj->Name}
     Subject: {$Transaction->Subject || $Ticket->Subject || "(No subject given)"}
       Owner: {$Ticket->OwnerObj->Name}
  Requestors: {$Ticket->RequestorAddresses}
      Status: {$Ticket->Status}
 Ticket <URL: {RT->Config->Get(\'WebURL\')}Ticket/Display.html?id={$Ticket->id} >


{$Transaction->Content()}
'
    },

    {

      Queue       => '0',
      Name        => 'Admin Correspondence',                     # loc
      Description => 'Default admin correspondence template',    # loc
      Content     => 'RT-Attach-Message: yes


<URL: {RT->Config->Get(\'WebURL\')}Ticket/Display.html?id={$Ticket->id} >

{$Transaction->Content()}
'
    },

    {  Queue       => '0',
       Name        => 'Correspondence',                          # loc
       Description => 'Default correspondence template',         # loc
       Content     => 'RT-Attach-Message: yes

{$Transaction->Content()}
'
    },

    {  Queue       => '0',
       Name        => 'Admin Comment',                           # loc
       Description => 'Default admin comment template',          # loc
       Content     =>
'Subject: [Comment] {my $s=($Transaction->Subject||$Ticket->Subject||""); $s =~ s/\\[Comment\\]\\s*//g; $s =~ s/^Re:\\s*//i; $s;}
RT-Attach-Message: yes


{RT->Config->Get(\'WebURL\')}Ticket/Display.html?id={$Ticket->id}
This is a comment.  It is not sent to the Requestor(s):

{$Transaction->Content()}
'
    },

    {  Queue       => '0',
       Name        => 'Reminder',                           # loc
       Description => 'Default reminder template',          # loc
       Content     =>
'Subject:{$Ticket->Subject} is due {$Ticket->DueObj->AsString}

This reminder is for ticket #{$Target = $Ticket->RefersTo->First->TargetObj;$Target->Id}.

{RT->Config->Get(\'WebURL\')}Ticket/Display.html?id={$Target->Id}
'
    },

    {  Queue       => '0',
       Name        => 'Status Change',                                     # loc
       Description => 'Ticket status changed',                             # loc
       Content     => 'Subject: Status Changed to: {$Transaction->NewValue}


{RT->Config->Get(\'WebURL\')}Ticket/Display.html?id={$Ticket->id}

{$Transaction->Content()}
'
    },

    {

      Queue       => '0',
      Name        => 'Resolved',                 # loc
      Description => 'Ticket Resolved',          # loc
      Content     => 'Subject: Resolved: {$Ticket->Subject}

According to our records, your request has been resolved. If you have any
further questions or concerns, please respond to this message.
'
    },
    {  Queue       => '___Approvals',
       Name        => "New Pending Approval",    # loc
       Description =>
         "Notify Owners and AdminCcs of new items pending their approval", # loc
       Content => 'Subject: New Pending Approval: {$Ticket->Subject}

Greetings,

There is a new item pending your approval: "{$Ticket->Subject()}", 
a summary of which appears below.

Please visit {RT->Config->Get(\'WebURL\')}Approvals/Display.html?id={$Ticket->id}
to approve or reject this ticket, or {RT->Config->Get(\'WebURL\')}Approvals/ to
batch-process all your pending approvals.

-------------------------------------------------------------------------
{$Transaction->Content()}
'
    },
    {  Queue       => '___Approvals',
       Name        => "Approval Passed",    # loc
       Description =>
         "Notify Requestor of their ticket has been approved by some approver", # loc
       Content => 'Subject: Ticket Approved: {$Ticket->Subject}

Greetings,

Your ticket has been approved by { eval { $Approver->Name } }.
Other approvals may be pending.

Approver\'s notes: { $Notes }
'
    },
    {  Queue       => '___Approvals',
       Name        => "All Approvals Passed",    # loc
       Description =>
         "Notify Requestor of their ticket has been approved by all approvers", # loc
       Content => 'Subject: Ticket Approved: {$Ticket->Subject}

Greetings,

Your ticket has been approved by { eval { $Approver->Name } }.
Its Owner may now start to act on it.

Approver\'s notes: { $Notes }
'
    },
    {  Queue       => '___Approvals',
       Name        => "Approval Rejected",    # loc
       Description =>
         "Notify Owner of their rejected ticket", # loc
       Content => 'Subject: Ticket Rejected: {$Ticket->Subject}

Greetings,

Your ticket has been rejected by { eval { $Approver->Name } }.

Approver\'s notes: { $Notes }
'
    },
    {  Queue       => '___Approvals',
       Name        => "Approval Ready for Owner",    # loc
       Description =>
         "Notify Owner of their ticket has been approved and is ready to be acted on", # loc
       Content => 'Subject: Ticket Approved: {$Ticket->Subject}

Greetings,

The ticket has been approved, you may now start to act on it.

'
    },
    {  Queue       => 0,
       Name        => "Forward",    # loc
       Description => "Heading of a forwarded message", # loc
       Content => q{
This is a forward of transaction #{$Transaction->id} of ticket #{ $Ticket->id }
}
    },
    {  Queue       => 0,
       Name        => "Forward Ticket",    # loc
       Description => "Heading of a forwarded Ticket", # loc
       Content => q{

This is a forward of ticket #{ $Ticket->id }
}
    },
    {  Queue       => 0,
       Name        => "Error: public key",    # loc
       Description =>
         "Inform user that he has problems with public key and couldn't recieve encrypted content", # loc
       Content => q{Subject: We have no your public key or it's wrong

You received this message as we have no your public PGP key or we have a problem with your key. Inform the administrator about the problem.
}
    },
    {  Queue       => 0,
       Name        => "Error to RT owner: public key",    # loc
       Description =>
         "Inform RT owner that user(s) have problems with public keys", # loc
       Content => q{Subject: Some users have problems with public keys

You received this message as RT has problems with public keys of the following user:
{
    foreach my $e ( @BadRecipients ) {
        $OUT .= "* ". $e->{'Message'} ."\n";
    }
}}
    },
    {  Queue       => 0,
       Name        => "Error: no private key",    # loc
       Description =>
         "Inform user that we received an encrypted email and we have no private keys to decrypt", # loc
       Content => q{Subject: we received message we cannot decrypt

You sent an encrypted message with subject '{ $Message->head->get('Subject') }',
but we have no private key it's encrypted to.

Please, check that you encrypt messages with correct keys
or contact the system administrator.}
    },
    {  Queue       => 0,
       Name        => "Error: bad GnuPG data",    # loc
       Description =>
         "Inform user that a message he sent has invalid GnuPG data", # loc
       Content => q{Subject: We received a message we cannot handle

You sent us a message that we cannot handle due to corrupted GnuPG signature or encrypted block. we get the following error(s):
{ foreach my $msg ( @Messages ) {
    $OUT .= "* $msg\n";
  }
}}
    },
    {  Queue       => 0,
       Name        => "PasswordChange",    # loc
       Description =>
         "Inform user that his password has been reset", # loc
       Content => q{Subject: [{RT->Config->Get('rtname')}] Password reset

Greetings,

Someone at {$ENV{'REMOTE_ADDR'}} requested a password reset for you on {RT->Config->Get('WebURL')}

Your new password is:
  {$NewPassword}
}
    },

               {   Queue       => '0',
                   Name        => 'Email Digest',    # loc
                   Description => 'Email template for periodic notification digests',  # loc
                   Content => q[Subject: RT Email Digest

{ $Argument }
],
               },

{
    Queue       => 0,
    Name        => "Error: Missing dashboard",    # loc
    Description =>
      "Inform user that a dashboard he subscribed to is missing", # loc
    Content => q{Subject: [{RT->Config->Get('rtname')}] Missing dashboard!

Greetings,

You are subscribed to a dashboard that is currently missing. Most likely, the dashboard was deleted.

RT will remove this subscription as it is no longer useful. Here's the information RT had about your subscription:

DashboardID:  { $SubscriptionObj->SubValue('DashboardId') }
Frequency:    { $SubscriptionObj->SubValue('Frequency') }
Hour:         { $SubscriptionObj->SubValue('Hour') }
{
    $SubscriptionObj->SubValue('Frequency') eq 'weekly'
    ? "Day of week:  " . $SubscriptionObj->SubValue('Dow')
    : $SubscriptionObj->SubValue('Frequency') eq 'monthly'
      ? "Day of month: " . $SubscriptionObj->SubValue('Dom')
      : ''
}
}
},
);

@Scrips = (
    {  Description    => 'On Comment Notify AdminCcs as Comment',
       ScripCondition => 'On Comment',
       ScripAction    => 'Notify AdminCcs As Comment',
       Template       => 'Admin Comment' },
    {  Description    => 'On Comment Notify Other Recipients as Comment',
       ScripCondition => 'On Comment',
       ScripAction    => 'Notify Other Recipients As Comment',
       Template       => 'Correspondence' },
    {  Description    => 'On Correspond Notify AdminCcs',
       ScripCondition => 'On Correspond',
       ScripAction    => 'Notify AdminCcs',
       Template       => 'Admin Correspondence' },
    {  Description    => 'On Correspond Notify Other Recipients',
       ScripCondition => 'On Correspond',
       ScripAction    => 'Notify Other Recipients',
       Template       => 'Correspondence' },
    {  Description    => 'On Correspond Notify Requestors and Ccs',
       ScripCondition => 'On Correspond',
       ScripAction    => 'Notify Requestors And Ccs',
       Template       => 'Correspondence' },
    {  Description    => 'On Correspond Open Inactive Tickets',
       ScripCondition => 'On Correspond',
       ScripAction    => 'Open Inactive Tickets',
       Template       => 'Blank' },
    {  Description    => 'On Create Autoreply To Requestors',
       ScripCondition => 'On Create',
       ScripAction    => 'AutoReply To Requestors',
       Template       => 'AutoReply' },
    {  Description    => 'On Create Notify AdminCcs',
       ScripCondition => 'On Create',
       ScripAction    => 'Notify AdminCcs',
       Template       => 'Transaction' },
    {  Description    => 'On Owner Change Notify Owner',
       ScripCondition => 'On Owner Change',
       ScripAction    => 'Notify Owner',
       Template       => 'Transaction' },
    {  Description    => 'On Resolve Notify Requestors',
       ScripCondition => 'On Resolve',
       ScripAction    => 'Notify Requestors',
       Template       => 'Resolved' },
    {  Description    => "On transaction, add any tags in the transaction's subject to the ticket's subject",
       ScripCondition => 'On Transaction',
       ScripAction    => 'Extract Subject Tag',
       Template       => 'Blank' },
);

@ACL = (
    { UserId => 'root',        # - principalid
      Right  => 'SuperUser', },

    { GroupDomain => 'SystemInternal',
      GroupType => 'privileged',
      Right  => 'ShowApprovalsTab', },

);

# Predefined searches

@Attributes = (
    { Name => 'Search - My Tickets',
      Description => '[_1] highest priority tickets I own', # loc
      Content     =>
      { Format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__Subject__</a>/TITLE:Subject',}
                 . q{Priority, QueueName, ExtendedStatus},
        Query   => " Owner = '__CurrentUser__' AND ( Status = 'new' OR Status = 'open')",
        OrderBy => 'Priority',
        Order   => 'DESC'
      },
    },
    { Name => 'Search - Unowned Tickets',
      Description => '[_1] newest unowned tickets', # loc
      Content     =>
# 'Take' #loc
      { Format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__Subject__</a>/TITLE:Subject',}
                 . q{QueueName, ExtendedStatus, CreatedRelative, }
                 . q{'<A HREF="__WebPath__/Ticket/Display.html?Action=Take&id=__id__">__loc(Take)__</a>/TITLE:NBSP'},
        Query   => " Owner = 'Nobody' AND ( Status = 'new' OR Status = 'open')",
        OrderBy => 'Created',
        Order   => 'DESC'
      },
    },
    { Name => 'Search - Bookmarked Tickets',
      Description => 'Bookmarked Tickets', #loc
      Content     =>
      { Format => q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__Subject__</a>/TITLE:Subject',}
                . q{Priority, QueueName, ExtendedStatus, Bookmark},
        Query   => "id = '__Bookmarked__'",
        OrderBy => 'LastUpdated',
        Order   => 'DESC' },
    },
    {
        Name        => 'HomepageSettings',
        Description => 'HomepageSettings',
        Content     => {
            'body' =>    # loc
              [
                {
                    type => 'system',
                    name => 'My Tickets',           # loc
                },
                {
                    type => 'system',
                    name => 'Unowned Tickets'       # loc
                },
                {
                    type => 'system',
                    name => 'Bookmarked Tickets'    # loc
                },
                {
                    type => 'component',
                    name => 'QuickCreate'           # loc
                },
              ],
            'sidebar' =>                            # loc
              [
                {
                    type => 'component',
                    name => 'MyReminders'           # loc
                },
                {
                    type => 'component',
                    name => 'Quicksearch'           # loc
                },
                {
                    type => 'component',
                    name => 'Dashboards'            # loc
                },
                {
                    type => 'component',
                    name => 'RefreshHomepage'       # loc
                },
              ],
        },
    },
);
